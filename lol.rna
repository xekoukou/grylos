#!/usr/bin/env nodejs

/*

  Copyright (c) 2014-2015 Contributors as noted in AUTHORS file.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

*/

//Small changes to Basic classes to make life easier.
Array.prototype.last = function() {
    return this[this.length - 1];
}

function Ribosome() {

    var fs = require('fs');

    function Block(s) {
        var self = this;
        this.text = [];
        this.width = 0;

        if (s != null) {
            this.text = s.split('\n');
            this.text.forEach(function(line) {
                self.width = Math.max(self.width, line.length);
            });
        }

        this.add_right = function(block) {
            var i = 0;
            var self = this;
            block.text.forEach(function(line) {
                if (self.text.length > i) {
                    self.text[i] = self.text[i] +
                        Array(self.width - self.text[i].length + 1).join(' ') + line;
                } else {
                    self.text[i] = Array(self.width + 1).join(' ') + line;
                }
                i++;
            });
            this.width += block.width;

        };

        this.add_bottom = function(block) {
            this.text = this.text.concat(block.text);
            this.width = Math.max(this.width, block.width);

        };

        this.trim = function() {

            var top = -1;
            var bottom = -1;
            var left = -1;
            var right = -1;

            this.text.forEach(function(line, index) {

                if (line.trim() != '') {
                    if (top == -1) {
                        top = index;
                    }
                    bottom = index;
                    if (left == -1) {
                        left = line.length - (line + 'W').trim().length + 1;
                    } else {
                        left = Math.min(left, line.length - (line + 'W').trim().length + 1);
                    }
                    if (right == -1) {
                        right = ('W' + line).trim().length - 1;
                    } else {
                        right = Math.max(right, ('W' + line).trim().length - 1);
                    }

                }

            });

            if (bottom == -1) {
                this.text = [];
                this.width = 0;
                return;
            }

            this.text = this.text.slice(top, bottom + 1);

            this.text.forEach(function(line, index, array) {
                array[index] = line.slice(left, right);
            });

            this.width = right - left;

        };

        this.write = function(out, outisafile, tabsize) {
            this.text.forEach(function(line) {

                if (tabsize > 0) {
                    var ws = line.length - (line + 'w').trim().length + 1;
                    var line = Array(Math.floor(ws / tabsize) + 1).join('	') +
                        Array((ws % tabsize) + 1).join(' ') + (line + 'W').trim().slice(0, -1);
                }
                if (outisafile == true) {
                    fs.appendFileSync(out, line);
                    fs.appendFileSync(out, '\n');
                } else {
                    out.write(line);
                    out.write('\n');
                }
            });

        };

        this.last_offset = function() {
            if (this.text.length == 0) {
                return 0;
            } else {
                var last = this.text[this.text.length - 1];
                return last.length - (last + "w").trim().length + 1;
            }
        };

    }

    var tabsize = 0;

    var outisafile = false;
    var out = process.stdout;
    var append_flag = false;

    var stack = [
        []
    ];

    this.output = output;

    function output(filename) {
        close();
        outisafile = true;
        append_flag = false;
        out = filename;
    };

    this.append = append;

    function append(filename) {
        close();
        outisafile = true;
        append_flag = true;
        out = filename;
    };

    this.stdout = stdout;

    function stdout() {
        close();
        outisafile = false;
        out = process.stdout;
    };

    this.tabsize = change_tabsize;

    function change_tabsize(size) {
        tabsize = size;
    };

    this.close = close;

    function close() {
        if (append_flag == false && typeof out === "string") {
            if (fs.existsSync(out)) {
                fs.unlinkSync(out);
            }
        }
        stack.last().forEach(function(b) {
            b.write(out, outisafile, tabsize);
        });
        stack = [
            []
        ];
    }

    this.add = add;

    function add(line, leval) {

        if (stack.last().length == 0) {
            stack.last().push(new Block(''));
        }

        var block = stack.last().last();

        var i = 0;

        while (true) {
            var j = line.substr(i).search(/[@&][1-9]?\{/);
            if (j == -1) {
                j = line.length;
            } else {
                j += i;
            }

            if (i != j) {
                block.add_right(new Block(line.slice(i, j)));
            }
            if (j == line.length) {
                break;
            }

            i = j;
            j++;

            var level = parseInt(line.charAt(j), 10);
            if (isNaN(level)) {
                level = 0;
            } else {
                j++;
            }

            var par = 0;

            while (true) {
                if (line.charAt(j) == '{') {
                    par++;
                } else {
                    if (line.charAt(j) == '}') {
                        par--;
                    }
                }

                if (par == 0) {
                    break;
                }
                j++;

                if (j >= line.length) {
                    process.stderr.write('SyntaxError: Unmatched {');
                }
            }

            if (level > 0) {
                if (line.charAt(i + 1) == '1') {
                    block.add_right(new Block('@' + line.slice(i + 2, j + 1)));
                } else {
                    line = line.slice(0, i + 1) + (parseInt(line.charAt(i + 1)) - 1) + line.slice(i + 2);
                    block.add_right(new Block(line.slice(i, j + 1)));
                }
                i = j + 1;
                continue;
            }

            //TODO level can only be zero here.
            var expr = line.slice((level == 0) ? i + 2 : i + 3, j);

            stack.push([]);
            var val = leval(expr);
            var top = stack.pop();
            if (top.length == 0) {
                val = new Block(val.toString());
            } else {
                val = new Block('');
                top.forEach(function(b) {
                    val.add_bottom(b);
                });
            }

            if (line.charAt(i) == '@') {
                val.trim();
            }
            block.add_right(val);
            i = j + 1;

        }

    }

    this.dot = dot;

    function dot(line, leval) {
        stack.last().push(new Block(''));
        add(line, leval);
    }

    this.align = align;

    function align(line, leval) {
        var n;
        if (stack.last().length == 0) {
            n = 0;
        } else {
            n = stack.last().last().last_offset();
        }

        stack.last().push(new Block(''));

        add(Array(n + 1).join(' '));
        add(line, leval);
    }

    this.rethrow = rethrow;

    function rethrow(e, rnafile, linemap) {

        var msg = e.stack.split("\n");
        for (var i = 1; i < msg.length; i++) {
            if (msg[i].indexOf(".rna:") != -1) {
                var lindexes = msg[i].split(":");
                var rrow = parseInt(lindexes[lindexes.length - 1]);
                var column = parseInt(lindexes[lindexes.length - 2]);
                var rcolumn = 0;
                var filename;
                for (var j = 0; j < linemap.length - 1; j++) {
                    if (linemap[j][0] <= column) {
                        rcolumn = column - linemap[j][0] + 1;
                        filename = linemap[j][1];
                    } else {
                        break;
                    }
                }
                msg[i] = msg[i].replace(/\(.*\)$/, "(" + filename + ":" + rcolumn + ":" + rrow + ")");
            }
        }
        msg.forEach(function(item) {
            process.stderr.write(item);
            process.stderr.write("\n");
        });

        process.exit(1);
    }

}

var ribosome = new Ribosome();

function at() {
    return '@';
}

function amp() {
    return '&';
}

function slash() {
    return '/';
}

///////////////////////////////////////////////////////////////////////
//
//  The code that belongs to the protein project ends at this point of the
//  RNA file and so does the associated license. What follows is the code
//  generated from the DNA file.
//
///////////////////////////////////////////////////////////////////////


//-------------Begin-------------

var INDENT_SIZE = 4;

var fs=require('fs');

var source_path=process.argv[2];
var leveled_graph = JSON.parse(fs.readFileSync(process.argv[3], {
    encoding: "utf-8"
}));
var flattened_graph = JSON.parse(fs.readFileSync(process.argv[4], {
    encoding: "utf-8"
}));
var thread_starting_points = JSON.parse(fs.readFileSync(process.argv[5], {
    encoding: "utf-8"
}));

//Helper functions

function set_cpath(pointer, start, end) {
    var cpath = pointer[start];
    for (var i = start + 1; i <= end; i++) {
        cpath = cpath + "/" + pointer[i];
    }
    return cpath;
}


ribosome.output(source_path)

    function compare(pointer, sec_pointer) {
        var min = Math.min(pointer.length, sec_pointer.length);
        var last = -1;
        for (var i = 0; i < min; i++) {
            if (pointer[i] != sec_pointer[i]) {
                break;
            }
            last++;
        }
        return last;
    }

    function contains(array, item) {
        var contains = false;
        array.forEach(function(each) {
            if (each == item) {
                contains = true;
            }
        });
        return contains;
    }

    function traverse_level_graph(leveled_graph, pointer) {
        pointer.shift();
        var lgraph = leveled_graph;
        pointer.forEach(function(item) {
            lgraph = lgraph.set[item];
        });
        return lgraph;
    }





    function generate_start_js() {
        //TODO Add the license of the project.

ribosome.dot("//$GENERATED",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("\"use strict\";",function(_expr){return eval(_expr);})

        //Add the deep_freeze function

ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("function deepFreeze_734n8v374vbn98evjvnjskl (o) {",function(_expr){return eval(_expr);})
ribosome.dot("  Object.freeze(o);",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("  var oIsFunction = typeof o === \"function\";",function(_expr){return eval(_expr);})
ribosome.dot("  var hasOwnProp = Object.prototype.hasOwnProperty;",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("  Object.getOwnPropertyNames(o).forEach(function (prop) {",function(_expr){return eval(_expr);})
ribosome.dot("    if (hasOwnProp.call(o, prop)",function(_expr){return eval(_expr);})
ribosome.dot("    && (oIsFunction ? prop !== \"caller\" && prop !== \"callee\" && prop !== \"arguments\" : true )",function(_expr){return eval(_expr);})
ribosome.dot("    && o[prop] !== null",function(_expr){return eval(_expr);})
ribosome.dot("    && (typeof o[prop] === \"object\" || typeof o[prop] === \"function\")",function(_expr){return eval(_expr);})
ribosome.dot("    && !Object.isFrozen(o[prop])) {",function(_expr){return eval(_expr);})
ribosome.dot("      deepFreeze_734n8v374vbn98evjvnjskl(o[prop]);",function(_expr){return eval(_expr);})
ribosome.dot("    }",function(_expr){return eval(_expr);})
ribosome.dot("  });",function(_expr){return eval(_expr);})
ribosome.dot(" ",function(_expr){return eval(_expr);})
ribosome.dot("  return o;",function(_expr){return eval(_expr);})
ribosome.dot("};",function(_expr){return eval(_expr);})

        //TODO Add the internal variables of top graph.
    }


    function generate_add_node_js(source_path,pointer, flattened_graph, leveled_graph) {
        var nested_depth = pointer.length - 2;
        var space= Array((nested_depth * INDENT_SIZE) + 1).join(' ');

ribosome.dot("@{space}new (function(){",function(_expr){return eval(_expr);})
ribosome.dot("@{space}this.execute=function(",function(_expr){return eval(_expr);})

        var cpath = set_cpath(pointer, 0, pointer.length - 1);
        var node = flattened_graph[cpath];

        //Add all the input variables.
        var input_var = [];
        Object.keys(node.inputs).forEach(function(vname) {

            if (!('dependency' in node.inputs[vname].properties)) {
                input_var.push(vname);
            }
        });
ribosome.add('@{input_var.join(\",\")}){',function(_expr){return eval(_expr);});
ribosome.dot("///////////////////////////////////////////////////////////////////////",function(_expr){return eval(_expr);})
ribosome.dot("@{space}//Path: @{cpath}",function(_expr){return eval(_expr);})
ribosome.dot("@{space}//*** @{pointer[pointer.length - 1]} ***",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
        var lines = fs.readFileSync(source_path + '/' + cpath + ".js", {
            encoding: "utf-8"
        }).split("\n");
        lines.pop();

        lines.forEach(function(line) {
ribosome.dot("@{space}@{line}",function(_expr){return eval(_expr);})
        });
ribosome.dot("///////////////////////////////////////////////////////////////////////",function(_expr){return eval(_expr);})

        //Make all outputs immutable if necessary.
        //TODO We have to deal with the outputs that go to other threads.
        Object.keys(node.outputs).forEach(function(vname) {
            var mutable = false;
            var dependency = false;

            //check mutability
            node.outputs[vname].forEach(function(each) {
                if ('mutable' in each.properties) {
                    mutable = true;
                }
                if ('dependency' in each.properties) {
                    dependency = true;
                }
            });

            if (!mutable && !dependency) {
ribosome.dot("deep_freeze_734n8v374vbn98evjvnjskl(@{vname});",function(_expr){return eval(_expr);})
            }
        });


ribosome.dot("@{space}}",function(_expr){return eval(_expr);})
ribosome.dot("})().execute(",function(_expr){return eval(_expr);})

        //Add the input variables.
        var lgraph = traverse_level_graph(leveled_graph, pointer.slice(0, pointer.length - 1));
        var input_var = [];
        Object.keys(node.inputs).forEach(function(vname) {

            if (!('dependency' in node.inputs[vname].properties)) {
                if (vname in lgraph.inputs) {
                    input_var.push(vname);
                } else {
                    input_var.push("this." + vname);
                }
            }
        });
ribosome.add('@{input_var.join(\",\")})',function(_expr){return eval(_expr);});
ribosome.dot("",function(_expr){return eval(_expr);})
    }









    function generate_go_up_js(pointer, flattened_graph, leveled_graph) {
        var nested_depth = Math.min(Math.abs(pointer.length - 2), 0);
        var space= Array((nested_depth * INDENT_SIZE) + 1).join(' ');
ribosome.dot("@{space}//End of subgraph *** @{pointer[pointer.length - 1]} ***",function(_expr){return eval(_expr);})
ribosome.dot("///////////////////////////////////////////////////////////////////////",function(_expr){return eval(_expr);})
ribosome.dot("@{space}}",function(_expr){return eval(_expr);})
ribosome.dot("@{space}})().execute(\'",function(_expr){return eval(_expr);})

        //Add the input variables.
        var subgraph = traverse_level_graph(leveled_graph, pointer.slice(0, pointer.length));
        var lgraph = traverse_level_graph(leveled_graph, pointer.slice(0, pointer.length - 1));

        var input_var = [];
        Object.keys(subgraph.inputs).forEach(function(vname) {

            if (!('dependency' in subgraph.inputs[vname].properties)) {

                if (vname in lgraph.inputs) {
                    input_var.push(vname);
                } else {
                    input_var.push("this." + vname);
                }

            }
        });
ribosome.add('@{input_var.join(\",\")}',function(_expr){return eval(_expr);});
ribosome.add(');',function(_expr){return eval(_expr);});
ribosome.dot("",function(_expr){return eval(_expr);})

    }









    function generate_go_down_js(pointer, set_id, flattened_graph, leveled_graph) {
        var nested_depth = Math.min(Math.abs(pointer.length - 2), 0);
        var space= Array((nested_depth * INDENT_SIZE) + 1).join(' ');

ribosome.dot("@{space}new (function(){",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("///////////////////////////////////////////////////////////////////////",function(_expr){return eval(_expr);})

        var cpath = set_cpath(pointer, 0, pointer.length - 1);
ribosome.dot("@{space}//Path: @{cpath}",function(_expr){return eval(_expr);})
ribosome.dot("@{space}//*** @{pointer[pointer.length - 1]} ***",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("@{space}//* Internal Variables *",function(_expr){return eval(_expr);})
ribosome.dot("@{space}///////////////",function(_expr){return eval(_expr);})

        //Add the internal variables.

        var lgraph = traverse_level_graph(leveled_graph, pointer.slice(0, pointer.length));

        Object.keys(flattened_graph).forEach(function(key) {
            var node = flattened_graph[key];
            if ((key.indexOf(cpath) == 0) && (node.pointer.length - pointer.length == 1) && (node.properties.set == set_id)) {
                //Add all inputs that are not outside inputs.
                Object.keys(node.inputs).forEach(function(vname) {
                    if (!(vname in lgraph.inputs)) {
ribosome.dot("@{space}this.@{vname};",function(_expr){return eval(_expr);})
                    }
                });
            }
        });

ribosome.dot("@{space}///////////////",function(_expr){return eval(_expr);})
ribosome.dot("",function(_expr){return eval(_expr);})
ribosome.dot("@{space}this.execute=function(",function(_expr){return eval(_expr);})

        //Add the input variables.
        var subgraph = traverse_level_graph(leveled_graph, pointer.slice(0, pointer.length));
        var lgraph = traverse_level_graph(leveled_graph, pointer.slice(0, pointer.length - 1));

        var input_var = [];
        Object.keys(subgraph.inputs).forEach(function(vname) {

            if (!('dependency' in subgraph.inputs[vname].properties)) {

                input_var.push(vname);

            }
        });
ribosome.add('@{input_var.join(\",\")}){',function(_expr){return eval(_expr);});

    }



    generate_start_js();

    //Group starting points per subgraph.
    var grouped_starting_points = {};
    Object.keys(thread_starting_points).forEach(function(key) {
        Object.keys(thread_starting_points[key]).forEach(function(subgraph_id) {
            if (!(subgraph_id in grouped_starting_points)) {
                grouped_starting_points[subgraph_id] = {};
            }
            Object.keys(thread_starting_points[key][subgraph_id]).forEach(function(path) {
                grouped_starting_points[subgraph_id][path] = thread_starting_points[key][subgraph_id][path];
            });
        });
    });

    Object.keys(grouped_starting_points).forEach(function(set_id) {

        //Open the root subgraph
        generate_go_down_js([""], set_id, flattened_graph, leveled_graph);

        var set = grouped_starting_points[set_id];

        //The current subgraphs that we have already skipped because they had unmet dependencies.
        // This is emptied after one more node is added to the source file.
        var skippedList = [];

        //The current subgraph;
        var prefix_pointer = [""];

        //added_i determines the i in which we added our last node.
        var added_i = -1;
        var i = 0;

        var keys = Object.keys(set);
        while (keys.length > 0) {
            node = flattened_graph[keys[i]];
            var diff = compare(node.pointer, prefix_pointer);

            //moveOn is used to increment the index i;
            var moveOn = false;

            //node must be inside the prefix_pointer subgraph.
            //Check if we already skipped that subgraph.
            if ((diff == prefix_pointer.length - 1) && (!contains(skippedList, node.pointer))) {

                //Check if we reached Bottom.
                if (node.pointer.length == prefix_pointer.length) {

                    //Add the node code into the source file.
                    generate_add_node_js(source_path, node.pointer, flattened_graph, leveled_graph);

                    //Mark it by removing the passed property.
                    delete node.properties.passed;

                    //Add the outputs from the node to the set.
                    Object.keys(node.outputs).forEach(function(vname) {
                        node.outputs[vname].forEach(function(item) {
                            var cpath = set_cpath(item.end_pointer, 0, item.end_pointer.length - 1);
                            var node = flattened_graph[cpath];

                            //node must be in the same thread/subgraph.
                            if (node.properties.set == set_id) {

                                //We add the node.
                                set[cpath] = item.end_pointer;
                            }
                        });
                    });

                    //Remove the current node
                    delete set[keys[i]];

                    //Find all the keys again.
                    keys = Object.keys(set);

                    //Update the prefix_pointer.
                    prefix_pointer = prefix_pointer.slice(0, prefix_pointer.length - 1);

                    //Update the added_i.
                    added_i = i - 1;
                    if ((added_i < 0) && (keys.length > 1)) {
                        added_i = added_i + keys.length;
                    }

                    //The i might be at the end so we need to put at the front after the removal of the node.
                    i = i % keys.length;
                } else {

                    //Check that all the dependencies of the subgraph are met.
                    var missing_dependencies = false;
                    var lgraph = traverse_level_graph(leveled_graph, node.pointer.slice(0, prefix_pointer.length + 1));
                    Object.keys(lgraph.inputs).forEach(function(nvalue) {
                        var cpath = set_cpath(lgraph.inputs[nvalue].origin_pointer, 0, lgraph.inputs[nvalue].origin_pointer.length - 1);
                        var input_node = flattened_graph[cpath];
                        if ("passed" in input_node.properties) {
                            missing_dependencies = true;
                        }
                    });
                    if (!missing_dependencies) {
                        prefix_pointer = node.pointer.slice(0, prefix_pointer.length + 1);
                        //If a subgraph, add the necessary code.
                        if (prefix_pointer.length != node.pointer.length) {
                            generate_go_down_js(prefix_pointer, set_id, flattened_graph, leveled_graph);
                        }
                        continue;
                    } else {
                        skippedList.push(node.pointer.slice(0, prefix_pointer.length + 1));
                        moveOn = true;
                    }
                }

            } else {
                moveOn = true;
            }


            if (i == added_i) {

                //There are no more nodes to add for this subgraph.
                generate_go_up_js(prefix_pointer, flattened_graph, leveled_graph);

                //Move the prefix_pointer one level up.
                prefix_pointer = prefix_pointer.slice(0, prefix_pointer.length - 1);
            }
            if (moveOn) {
                i++;
                i = i % keys.length;
            }
        };

        //Close the remaining subgraphs
        for (var j = 1; j < prefix_pointer.length; j++) {
            generate_go_up_js(prefix_pointer, flattened_graph, leveled_graph);
        }

        //Close the root subgraph
        generate_go_up_js([""], flattened_graph, leveled_graph);
    });

ribosome.close();

