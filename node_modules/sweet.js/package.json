{
  "name": "sweet.js",
  "description": "Hygienic Macros for JavaScript",
  "main": "lib/sweet.js",
  "version": "0.7.1",
  "engines": {
    "node": ">=0.4.0"
  },
  "author": {
    "name": "Tim Disney"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/mozilla/sweet.js/master/LICENSE.BSD"
    }
  ],
  "scripts": {
    "test": "node --harmony ./node_modules/.bin/grunt full --stack"
  },
  "directories": {
    "test": "test"
  },
  "bin": {
    "sjs": "bin/sjs"
  },
  "dependencies": {
    "optimist": "~0.3.4",
    "underscore": "~1.3.3",
    "escodegen": "1.2.x",
    "escope": "1.0.x",
    "resolve": "~0.6.1"
  },
  "devDependencies": {
    "mocha": "~1.3.2",
    "expect.js": "0.1.x",
    "source-map": "~0.1.31",
    "grunt-cli": "0.1.x",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-mocha-test": "~0.7.0",
    "grunt-contrib-watch": "~0.6.1",
    "esfuzz": "disnet/esfuzz"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mozilla/sweet.js.git"
  },
  "keywords": [
    "macros",
    "javascript"
  ],
  "license": "BSD",
  "readme": "[![Build Status](https://travis-ci.org/mozilla/sweet.js.png)](https://travis-ci.org/mozilla/sweet.js)\n\n# sweet.js\n\nHygienic Macros for JavaScript!\n\n* Read a [tutorial](http://jlongster.com/Writing-Your-First-Sweet.js-Macro) on macros.\n* Read the documentation at [sweetjs.org](http://sweetjs.org).\n* Play with the [editor](http://sweetjs.org/browser/editor.html).\n* Hang out on IRC #sweet.js at irc.mozilla.org.\n* Try out other [macros](https://npmjs.org/browse/keyword/sweet-macros).\n\n## Getting started\n\nInstall sweet.js with npm:\n\n```sh\n$ npm install -g sweet.js\n```\n\nAnd compile your sweet macro enhanced code:\n\n```sh\n$ sjs --output compiled.js my_sweet_code.js\n```\n\n## Sharing \n\nYou can collect your macros into a single module file to share with your other code or on npm. Full details [here](https://github.com/mozilla/sweet.js/wiki/modules) but the basic idea is to define your macros in a file `macros.js` and use the `export` keyword:\n\n```js\n// macros.js\nmacro m { ... }\nexport m;\n```\n\nThen compile using the `--module` flag:\n\n```sh\nsjs --module /macros.js my_sweet_code.js\n```\n\nThe `--module` also looks up along the `npm` path so you can install macro modules from `npm` (using [lambda-chop](https://github.com/natefaubion/lambda-chop) as an example):\n\n```sh\nnpm install lambda-chop\nsjs --module lambda-chop/macros my_sweet_code.js\n```\n\nIf you want to share your macros on npm we recommend using the [sweet-macros](https://npmjs.org/browse/keyword/sweet-macros) keyword to make macros easy to find.\n\n## Hacking\n\nInstall the dev dependencies:\n\n```sh\n$ npm install\n```\n\nBuild and run the tests:\n\n```sh\n$ grunt\n```\n\nSweet.js is self hosted so you hack on the files in `src/` using the version of sweet.js already built in `lib/`. When you are happy with your hacking, `grunt dist` will build a new version of sweet.js and put it into `lib/`.\n\nSlightly confusing but the process goes like this:\n\n```sh\n<hack hack hack>\n$ grunt\n<tests fail!>\n<hack hack hack>\n$ grunt\n<tests pass!>\n$ grunt dist\n$ git add lib/\n$ git commit -m \"sweet!\"\n```\n    \n\n## Credits\n\nBuilt on top of [esprima](http://esprima.org/) and [escodegen](https://github.com/Constellation/escodegen). [Contributors](https://github.com/mozilla/sweet.js/graphs/contributors) are awesome!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/sweet.js/issues"
  },
  "_id": "sweet.js@0.7.1",
  "dist": {
    "shasum": "771fc725ccdcb086e308a937ae9de2e7f659cd12"
  },
  "_from": "sweet.js@x",
  "_resolved": "https://registry.npmjs.org/sweet.js/-/sweet.js-0.7.1.tgz"
}
