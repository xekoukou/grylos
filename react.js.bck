fs = require("fs");

module.exports = function(path) {

    var code = fs.readFileSync(path).toString().split("\n");

    var info = new Array();
    var prev_mark = new Object();
    var y = 0;
    var index = 0;
    while (y < code.length) {
        var x = 0;
        var line = code[y];
        var new_mark = new Object();

        while (x < line.length) {
            var xar = line.charAt(x);





            var prev_char = null;
            if (x > 0) {
                var prev_char = line.charAt(x - 1);
            }
            switch (xar) {
                case " ":
                    if (prev_char == "-") {
                        console.log("Error(line:" + y + " position:" + x + "): There is a path with no ending");
                    } else {
                        x++;
                        continue;
                    }
                    break;
                case "-":
                    if ((prev_char == " ") && !((prev_mark[x]) && (prev_mark[x].type == "\\"))) {
                        new_mark[x] = {
                            type: "-",
                            start: x,
                            used: false
                        };


                    } else {
                        //TODO here we need to add all the different characters we allow for each path to have (r for reactive etc)
                        if ((prev_char == "-") || (prev_char == ")")) {
                            if (new_mark[x - 1].used == true) {
                                //TODO fix 
                                console.log("Error(line:" + y + " position:" + x + "): A path has split into 2 paths");
                            }
                            new_mark[x] = {};
                            for (var attr in new_mark[x - 1]) {
                                new_mark[x][attr] = new_mark[x - 1][attr]
                            };
                            new_mark[x].type = "-";
                            new_mark[x - 1].used = true;

                        } else {
                            if (prev_char == "|") {
                                new_mark[x] = {
                                    type: "-",
                                    index: new_mark[x - 1].index,
                                    used: false
                                };
                            } else {
                                if (!((prev_mark[x]) && (prev_mark[x].type == "\\"))) {
                                    console.log("Error(line:" + y + " position:" + x + "): Unexpected Character " + prev_char);
                                }
                            }

                        }
                    }
                    break;
                case "/":
                    if (prev_char == "-") {
                        new_mark[x] = {};
                        for (var attr in new_mark[x - 1]) {
                            new_mark[x][attr] = new_mark[x - 1][attr]
                        };
                        new_mark[x].type = "/";
                        new_mark[x - 1].used = true;

                    } else {
                        console.log("Error(line:" + y + " position:" + x + "): Unexpected Character " + prev_char);
                    }


                    break;
                case "\\":
                    if (prev_char == "-") {
                        new_mark[x] = {};
                        for (var attr in new_mark[x - 1]) {
                            new_mark[x][attr] = new_mark[x - 1][attr]
                        };
                        new_mark[x].type = "\\";
                        new_mark[x - 1].used = true;

                    } else {
                        console.log("Error(line:" + y + " position:" + x + "): Unexpected Character " + prev_char);
                    }


                    break;


                case "(":
                    if (prev_char != "-") {
                        console.log("Error(line:" + y + " position:" + x + "):Unexpected character '(' found");
                    } else {
                        if (new_mark[x - 1]["vname"]) {
                            console.log("Error(line:" + y + " position:" + x + "):Path has 2 variable names assigned to it");

                        } else {

                            new_mark[x] = {};
                            for (var attr in new_mark[x - 1]) {
                                new_mark[x][attr] = new_mark[x - 1][attr]
                            };

                            var vname = line.substring(x + 1).split(")")[0];
                            if (line.substring(x + 1) == vname) {
                                console.log("Error(line:" + y + " position:" + x + "):Missing ')' character.");
                            }
                            new_mark[x]["vname"] = vname;
                            new_mark[x + vname.length + 1] = new_mark[x];
                            x = x + vname.length + 2;
                            continue;
                        }
                    }
                    break;
                case "|":
                    //this happens after the next part
                    break;
                case null:
                    break;

                default:
                    if ((prev_char == " ") || (prev_char == null)) {
                        var function_name = line.substring(x).split(" ")[0];
                        info[index] = {
                            function_name: function_name
                        };
                        new_mark[x] = {
                            type: "function_name",
                            index: index,
                            used: false
                        };
                        for (var i = x + 1; i < x + function_name.length; i++) {
                            new_mark[i] = new_mark[x];
                        }
                        x = x + function_name.length;
                        index++;
                        continue;


                    } else {
                        if (prev_char == "-") {

                            //TODO properties information
                        }

                    }
            }








            if (prev_mark[x]) {
                switch (prev_mark[x].type) {

                    case "function_name":
                        if (xar == "|") {
                            if (prev_mark[x].used == true) {
                                console.log("Error(line:" + y + " position:" + x + "): There are two '|' behind a function name");

                            } else {
                                prev_mark[x].used = true;
                                new_mark[x] = {
                                    type: "|",
                                    index: prev_mark[x].index,
                                    used: false
                                };
                            }

                        } else {
                            //All other cases are not needed
                        }
                        break;
                    case "|":
                        if (xar == "|") {
                            new_mark[x] = {
                                type: "|",
                                index: prev_mark[x].index,
                                used: false
                            };
                        } else {
                            if (xar != " ") {
                                console.log("Error(line:" + y + " position:" + x + "): There isn't a space below '|' ");
                            }
                        }
                        break;
                    case "\\":
                        if (prev_mark[x].used == true) {
                            console.log("Error(line:" + y + " position:" + x + "): A path has split into 2 paths");

                        } else {
                            if ((xar == "-") || (xar == "\\")) {
                                if (!prev_mark[x].index) {
                                    var start = prev_mark[x].start;
                                    new_mark[x] = {
                                        type: xar,
                                        vname: (!prev_mark[x].vname) ? null : prev_mark[x].vname,
                                        start: start,
                                        used: false
                                    };

                                    new_mark[start].end =
                                        x;

                                } else {
                                    new_mark[x] = {
                                        type: xar,
                                        index: prev_mark[x].index,
                                        vname: (!prev_mark[x].vname) ? null : prev_mark[x].vname,
                                        used: false
                                    };

                                }




                            } else {
                                console.log("Error(line:" + y + " position:" + x + "): A decending non ending path exists");
                            }
                        }
                        break;
                        //this case should only be true if the character below is '/', else it is an error
                        //"-" needs to be updated for every new information that exists on right and above of it
                    case "/":
                    case "-":
                        if (xar == "/") {
                            var end = prev_mark[x].end;
                            new_mark[x] = {
                                type: "/",
                                vname: (!prev_mark[x].vname) ? null : prev_mark[x].vname,
                                end: end,
                                used: false
                            };

                            prev_mark[end].start =
                                x;



                        } else {
                            console.log("Error(line:" + y + " position:" + x + "): There is a path with no origin");
                        }


                        break;
                }


            }

            //must be used after the previous actions
            if (xar == "|") {
                if (!prev_mark[x]) {
                    console.log("Error(line:" + y + " position:" + x + "):There is no function name above '|' character");
                } else {
                    if (prev_char == "-") {
                        if (typeof new_mark[x - 1].index == 'number') {
                            if (new_mark[x - 1]["vname"]) {
                                info[new_mark[x - 1].index][new_mark[x - 1].vname] = info[new_mark[x].index].function_name;
                            } else {
                                console.log("Error(line:" + y + " position:" + x + "):There is a path without a name");
                            }
                        }

                    }
                }
            }


            x++;

        }
        prev_mark = new_mark;
        y++;

    }

    return info;

}
