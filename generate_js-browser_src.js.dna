var INDENT_SIZE = 4;

var fs=require('fs');

var source_path=process.argv[2];
./!output(source_path + ".js")

var leveled_graph = JSON.parse(fs.readFileSync(process.argv[3], {
    encoding: "utf-8"
}));
console.log("leveled graph:");
console.log(leveled_graph);
var flattened_graph = JSON.parse(fs.readFileSync(process.argv[4], {
    encoding: "utf-8"
}));
console.log("flattened_graph:");
console.log(flattened_graph);
var thread_starting_points = JSON.parse(fs.readFileSync(process.argv[5], {
    encoding: "utf-8"
}));
console.log("thread starting points:");
console.log(thread_starting_points);



    function node_return_outputs_generate(output_var) {
.&{space}return {
        var keys = Object.keys(output_var);
./!separate(", ")
        for(var i = 0; i<keys.length; i++){
./+"@{keys[i]}":@{keys[i]}
        }
./+}
         
    }




    function generate_start_js() {
        //TODO Add the license of the project.

.//$GENERATED
.
."use strict";

        //Add the deep_freeze function

.
.function deepFreeze_734n8v374vbn98evjvnjskl (o) {
.  Object.freeze(o);
.
.  var oIsFunction = typeof o === "function";
.  var hasOwnProp = Object.prototype.hasOwnProperty;
.
.  Object.getOwnPropertyNames(o).forEach(function (prop) {
.    if (hasOwnProp.call(o, prop)
.    && (oIsFunction ? prop !== "caller" && prop !== "callee" && prop !== "arguments" : true )
.    && o[prop] !== null
.    && (typeof o[prop] === "object" || typeof o[prop] === "function")
.    && !Object.isFrozen(o[prop])) {
.      deepFreeze_734n8v374vbn98evjvnjskl(o[prop]);
.    }
.  });
. 
.  return o;
.};
    }

    function generate_add_node_js(source_path,input_var, input_def_var, output_var) {
        var nested_depth = pointer.length - 2;
        var space= Array((nested_depth * INDENT_SIZE) + 1).join(' ');

.&{space}new (function(){
.&{space}this.execute=function(
./+@{input_def_var.join(",")}){
.&{space}///////////////////////////////////////////////////////////////////////
.&{space}//Path: @{cpath}
.&{space}//*** @{pointer[pointer.length - 1]} ***
.

//Adding the lines of the code.

        var lines = fs.readFileSync(source_path + '/' + cpath + ".js", {
            encoding: "utf-8"
        }).split("\n");
        lines.pop();

        lines.forEach(function(line) {

.&{space}@{line}

        });

.&{space}///////////////////////////////////////////////////////////////////////
.&{space}return { 
./!separate(", ")
        for(var i = 0; i<output_var.length; i++){
./+"@{output_var[i]}":@{output_var[i]}
        }
./+}

//TODO Move this code in the apropriate position.

        //Make all outputs immutable if necessary.

        Object.keys(node.outputs).forEach(function(vname) {
            var mutable = false;
            var dependency = false;

            //check mutability
            node.outputs[vname].forEach(function(each) {
                if ('mutable' in each.properties) {
                    mutable = true;
                }
                if ('dependency' in each.properties) {
                    dependency = true;
                }
            });

            if (!mutable && !dependency) {
.&{space}deep_freeze_734n8v374vbn98evjvnjskl(@{vname});
            }
        });


.&{space}}
.&{space}})().execute(
./+@{input_var.join(",")});
.
    }



    function subgraph_execute_variables(subgraph,leveled_graph,subgraph_input_vars) {

        var lgraph = traverse_leveled_graph(leveled_graph, pointer.slice(0, pointer.length - 1));

        subgraph_input_vars.forEach(function(vname) {

                if (vname in lgraph.inputs) {
                    subgraph.input_var[vname]=true;
                } else {
                    subgraph.local_input_var[vname]=true;
                }

        });
    }

    function subgraph_execute_definition_variables(subgraph,subgraph_input_vars,subgraph_input_definition_vars,subgraph_external_input_def_vars) {

//It should not be a local variable nor should it be an external varriable.
        subgraph_input_definition_vars.forEach(function(vname) {
          if(vname in subgraph_input_vars){
                    subgraph.input_def_var[vname]=true;
}
        });

        subgraph_external_input_definition_vars.forEach(function(vname) {
             if(vname in subgraph.external_input_def_var){
                    subgraph.external_input_def_var[vname]=subgraph.external_def_var[vname].concat(subgraph_external_input_definition_vars[vname]);
}else{
                    subgraph.external_input_def_var[vname]=subgraph_external_input_definition_vars[vname];

}
        });
    }

    function subgraph_return_outputs(subgraph,leveled_graph,subgraph_output_vars,subgraph_extrernal_output_vars) {

        var lgraph = traverse_leveled_graph(leveled_graph, pointer.slice(0, pointer.length));

//It should not be a local variable nor should it be an external varriable.
        subgraph_output_vars.forEach(function(vname) {
                if (vname in lgraph.inputs) {
                    subgraph.output_var[vname]=true;
                }
        });

        subgraph_external_output_vars.forEach(function(vname) {
             if(vname in subgraph.external_output_var){
                    subgraph.external_output_var[vname]=subgraph.external_output_var[vname].concat(subgraph_external_output_vars[vname]);
}else{
                    subgraph.external_output_var[vname]=subgraph_external_output_vars[vname];

}
        });
    }







    function generate_go_up_js(pointer, flattened_graph, leveled_graph) {
        var nested_depth = Math.min(Math.abs(pointer.length - 2), 0);
        var space= Array((nested_depth * INDENT_SIZE) + 1).join(' ');
.&{space}//End of subgraph *** @{pointer[pointer.length - 1]} ***
.&{space}///////////////////////////////////////////////////////////////////////
.&{space}}
.&{space}})().execute(

        var input_var = subgraph_execute_variables(pointer,leveled_graph);

./+@{input_var.join(",")}
./+);
.

    }









    function generate_go_down_js(pointer, set_id, flattened_graph, leveled_graph) {
        var nested_depth = Math.min(Math.abs(pointer.length - 2), 0);
        var space= Array((nested_depth * INDENT_SIZE) + 1).join(' ');

.&{space}new (function(){
.
.&{space}///////////////////////////////////////////////////////////////////////

        var cpath = set_cpath(pointer, 0, pointer.length - 1);
.&{space}//Path: @{cpath}
.&{space}//*** @{pointer[pointer.length - 1]} ***
.
.&{space}//* Internal Variables *
.&{space}///////////////

        //Add the internal variables.

        var lgraph = traverse_leveled_graph(leveled_graph, pointer.slice(0, pointer.length));

        Object.keys(flattened_graph).forEach(function(key) {
            var node = flattened_graph[key];
            if ((key.indexOf(cpath) == 0) && (node.pointer.length - pointer.length == 1) && (node.properties.set == set_id)) {
                //Add all inputs that are not outside inputs.
                Object.keys(node.inputs).forEach(function(vname) {
                    if (!(vname in lgraph.inputs)) {
.&{space}this.@{vname};
                    }
                });
            }
        });

.&{space}///////////////
.
.&{space}this.execute=function(

        //Add the input variables.
        var subgraph = traverse_leveled_graph(leveled_graph, pointer.slice(0, pointer.length));
        var lgraph = traverse_leveled_graph(leveled_graph, pointer.slice(0, pointer.length - 1));

        var input_var = [];
        Object.keys(subgraph.inputs).forEach(function(vname) {

            if (!('dependency' in subgraph.inputs[vname].properties)) {

                input_var.push(vname);

            }
        });
./+@{input_var.join(",")}){

    }




