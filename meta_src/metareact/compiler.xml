<?xml version="1.0"?>
<root>
    <info>
        <name> compiler </name>
        <desciption> This is the main program that compiles the meta source code into source code </desciption>
    </info>
    <inputs>
        <input name="xml_files" side-effect="true">
            <description>It is provided all the xml files of the source_path directory and its subdirectories.</description>
            <origin origin_name="xml_files" origin_location="generate_xml_content_from_children"/>
            <origin origin_name="xml_files" origin_location="parse_mr_files"/>
            <origin origin_name="xml_files" origin_location="prepare_src"/>
        </input>
        <input name="root_xml_file" side-effect="true" generated="true">
            <description>It reads the root xml file..</description>
            <origin origin_name="root_xml_file" origin_location="check_only_side_effects_exist" generated="true"/>
        </input>
        <input name="arguments" side-effect="true" generated="true">
            <origin origin_name="arguments" origin_location="main" generated="true"/>
        </input>
        <input name="mr_files" side-effect="true" generated="true">
            <description>It is provided all the mr files of the source_path directory and its subdirectories.</description>
            <origin origin_name="mr_files" origin_location="parse_mr_files" generated="true"/>
        </input>
        <input name="disk_mr_files" side-effect="true" generated="true">
            <description>It is provided all the mr files of the source_path directory and its subdirectories.</description>
            <origin origin_name="disk_mr_files" origin_location="parse_mr_files/find_mr_file_paths" generated="true"/>
        </input>
    </inputs>
    <outputs>
        <output name="xml_files" side-effect="true">
            <description>It saves the xml files to disk.</description>
            <origin origin_name="updated_xml_files" origin_location="generate_xml_content_from_children"/>
            <origin origin_name="xml_files" origin_location="parse_mr_files"/>
            <origin origin_name="cleaned_xml_files" origin_location="prepare_src/remove_generated_XML"/>
        </output>
        <output name="error" side-effect="true">
            <description>It prints an error message and probably exits.</description>
            <origin origin_name="error" origin_location="parse_mr_files/check_same_output_name"/>
            <origin origin_name="xml_errors" origin_location="prepare_src/validate_XML"/>
            <origin origin_name="error_msgs" origin_location="generate_xml_content_from_children"/>
            <origin origin_name="file_missing_errors" origin_location="parse_mr_files"/>
            <origin origin_name="error" origin_location="check_only_side_effects_exist"/>
        </output>
        <output name="console-text" side-effect="true" generated="true">
            <description>The program prints a request to be provided with the correct arguments </description>
            <origin origin_name="console-text" origin_location="main" generated="true"/>
        </output>
        <output name="deleted_src_files" side-effect="true" generated="true">
            <description>It deletes all the generated src files.</description>
            <origin origin_name="deleted_src_files" origin_location="prepare_src/delete_generated_src" generated="true"/>
        </output>
    </outputs>
    <graph generated="true">
        <node fn_name="main">
            <output name="source_path">
                <end_point fn_name="generate_xml_content_from_children"/>
                <end_point fn_name="parse_mr_files"/>
                <end_point fn_name="prepare_src"/>
                <end_point fn_name="check_only_side_effects_exist"/>
                <end_point fn_name="generate_src"/>
            </output>
        </node>
        <node fn_name="generate_xml_content_from_children">
            <output name="null">
                <end_point fn_name="check_only_side_effects_exist"/>
            </output>
        </node>
        <node fn_name="parse_mr_files">
            <output name="null">
                <end_point fn_name="generate_xml_content_from_children"/>
                <end_point fn_name="check_only_side_effects_exist"/>
            </output>
        </node>
        <node fn_name="prepare_src">
            <output name="null">
                <end_point fn_name="parse_mr_files"/>
            </output>
        </node>
        <node fn_name="module_dependencies">
            <output name="fs">
                <end_point fn_name="prepare_src"/>
                <end_point fn_name="generate_xml_content_from_children"/>
                <end_point fn_name="parse_mr_files"/>
                <end_point fn_name="check_only_side_effects_exist"/>
            </output>
            <output name="exec">
                <end_point fn_name="prepare_src"/>
            </output>
            <output name="path">
                <end_point fn_name="prepare_src"/>
                <end_point fn_name="generate_xml_content_from_children"/>
                <end_point fn_name="parse_mr_files"/>
            </output>
            <output name="cheerio">
                <end_point fn_name="prepare_src"/>
                <end_point fn_name="parse_mr_files"/>
                <end_point fn_name="check_only_side_effects_exist"/>
            </output>
        </node>
        <node fn_name="check_only_side_effects_exist">
            <output name="null">
                <end_point fn_name="generate_src"/>
            </output>
        </node>
    </graph>
</root>
